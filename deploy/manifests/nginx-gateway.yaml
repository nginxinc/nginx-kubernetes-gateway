apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-gateway
  namespace: nginx-gateway
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-gateway
rules:
- apiGroups:
  - ""
  resources:
  - services
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - httproutes
  verbs:
  - list
  - watch
- apiGroups:
  - gateway.nginx.org
  resources:
  - gatewayconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes/status
  - gateways/status
  - gatewayclasses/status
  verbs:
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-gateway
subjects:
- kind: ServiceAccount
  name: nginx-gateway
  namespace: nginx-gateway
roleRef:
  kind: ClusterRole
  name: nginx-gateway
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-gateway
  namespace: nginx-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-gateway
  template:
    metadata:
      labels:
        app: nginx-gateway
    spec:
      shareProcessNamespace: true
      serviceAccountName: nginx-gateway
      volumes:
      - name: nginx-config
        emptyDir: { }
      - name: njs-modules
        configMap:
          name: njs-modules
      initContainers:
      - image: busybox:1.34 # FIXME(pleshakov): use gateway container to init the Config with proper main config
        name: nginx-config-initializer
        command: [ 'sh', '-c', 'echo "load_module /usr/lib/nginx/modules/ngx_http_js_module.so; events {}  pid /etc/nginx/nginx.pid; http { include /etc/nginx/conf.d/*.conf; js_import /usr/lib/nginx/modules/njs/httpmatches.js; }" > /etc/nginx/nginx.conf && mkdir /etc/nginx/conf.d /etc/nginx/secrets && chown 1001:0 /etc/nginx/conf.d /etc/nginx/secrets' ]
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
      containers:
      - image: nginx-kubernetes-gateway:0.0.1
        imagePullPolicy: IfNotPresent
        name: nginx-gateway
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
        securityContext:
          runAsUser: 1001
          # FIXME(pleshakov) - figure out which capabilities are required
          # dropping ALL and adding only CAP_KILL doesn't work
          # Note: CAP_KILL is needed for sending HUP signal to NGINX main process
        args:
        - --gateway-ctlr-name=k8s-gateway.nginx.org/nginx-gateway/gateway
        - --gatewayclass=nginx
      - image: nginx:1.21.3
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
        - name: njs-modules
          mountPath: /usr/lib/nginx/modules/njs
