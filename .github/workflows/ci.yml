name: Continuous Integration

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - '**.md'

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  GOLANGCI_TIMEOUT: 10m0s

jobs:

  vars:
    name: Get variables
    runs-on: ubuntu-20.04
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
      go_version: ${{ steps.vars.outputs.go_version }}
      git_tag: ${{ steps.vars.outputs.git_tag }}
      version: ${{ steps.vars.outputs.version }}
      date: ${{ steps.vars.outputs.date }}
      trivy-image: ${{ steps.vars.outputs.trivy-image }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
          echo "::set-output name=git_tag::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)"
          echo "::set-output name=version::$(grep "VERSION = " Makefile | cut -d " " -f 3)"
          echo "::set-output name=date::$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              trivy-image=ghcr.io/nginxinc/nginx-kubernetes-gateway:${{ steps.meta.outputs.tags }}
          else
              trivy-image=nginx/nginx-kubernetes-gateway:${{ needs.vars.outputs.sha }}
          fi
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Lint Code
        uses: golangci/golangci-lint-action@v3.1.0
        with:
          args: --timeout ${{ env.GOLANGCI_TIMEOUT }}

  njs-lint:
    name: NJS Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Prettier on NJS code
        id: prettier-run
        uses: rutajdash/prettier-cli-action@v1.0.0
        with:
          config_path: ${{ github.workspace }}/internal/nginx/modules/.prettierrc
          file_pattern: ${{ github.workspace }}/internal/nginx/modules/**/*.js
          prettier_version: 2.6.2
      - name: Prettier Output
        if: ${{ failure() }}
        shell: bash
        run: |
          echo "The following files are not formatted:"
          echo "${{steps.prettier-run.outputs.prettier_output}}"
          echo "Run \"make njs-fmt\" locally to format the code"
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Run Tests
        run: make unit-test
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: cover-${{ needs.vars.outputs.sha }}.html
          path: ${{ github.workspace }}/cover.html

  njs-unit-tests:
    name: NJS Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install mocha@^8.2 esm chai
      - run: npx mocha -r esm ${{ github.workspace }}/internal/nginx/modules/test/httpmatches.test.js

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    needs: [vars, lint]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Build Binary
        run: make build
      - name: Cache Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build/.out/gateway
          key: nginx-kubernetes-gateway-${{ github.run_id }}-${{ github.run_number }}

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: [vars, binary]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build/.out/gateway
          key: nginx-kubernetes-gateway-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=ghcr.io/nginxinc/nginx-kubernetes-gateway
          tags: |
            type=semver,pattern={{version}}
      - name: Build Image Debian
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          target: local
          tags: ${{ steps.meta.outputs.tags }}
          load: ${{ !startsWith(github.ref, 'refs/tags') }}
          push: ${{ startsWith(github.ref, 'refs/tags') }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.vars.outputs.version }}
            GIT_COMMIT=${{ needs.vars.outputs.sha }}
            DATE=${{ needs.vars.outputs.date }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.3
        continue-on-error: true
        with:
          image-ref: ${{ steps.var.outputs.trivy-image }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-nginx-kubernetes-gateway.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-nginx-kubernetes-gateway.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: 'trivy-results-nginx-kubernetes-gateway.sarif'
          path: 'trivy-results-nginx-kubernetes-gateway.sarif'
