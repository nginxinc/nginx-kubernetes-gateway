// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/state"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
)

type FakeSecretStore struct {
	DeleteStub        func(types.NamespacedName)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 types.NamespacedName
	}
	GetStub        func(types.NamespacedName) *state.Secret
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 types.NamespacedName
	}
	getReturns struct {
		result1 *state.Secret
	}
	getReturnsOnCall map[int]struct {
		result1 *state.Secret
	}
	UpsertStub        func(*v1.Secret)
	upsertMutex       sync.RWMutex
	upsertArgsForCall []struct {
		arg1 *v1.Secret
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretStore) Delete(arg1 types.NamespacedName) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	stub := fake.DeleteStub
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		fake.DeleteStub(arg1)
	}
}

func (fake *FakeSecretStore) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSecretStore) DeleteCalls(stub func(types.NamespacedName)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeSecretStore) DeleteArgsForCall(i int) types.NamespacedName {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretStore) Get(arg1 types.NamespacedName) *state.Secret {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecretStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeSecretStore) GetCalls(stub func(types.NamespacedName) *state.Secret) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeSecretStore) GetArgsForCall(i int) types.NamespacedName {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretStore) GetReturns(result1 *state.Secret) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *state.Secret
	}{result1}
}

func (fake *FakeSecretStore) GetReturnsOnCall(i int, result1 *state.Secret) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *state.Secret
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *state.Secret
	}{result1}
}

func (fake *FakeSecretStore) Upsert(arg1 *v1.Secret) {
	fake.upsertMutex.Lock()
	fake.upsertArgsForCall = append(fake.upsertArgsForCall, struct {
		arg1 *v1.Secret
	}{arg1})
	stub := fake.UpsertStub
	fake.recordInvocation("Upsert", []interface{}{arg1})
	fake.upsertMutex.Unlock()
	if stub != nil {
		fake.UpsertStub(arg1)
	}
}

func (fake *FakeSecretStore) UpsertCallCount() int {
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	return len(fake.upsertArgsForCall)
}

func (fake *FakeSecretStore) UpsertCalls(stub func(*v1.Secret)) {
	fake.upsertMutex.Lock()
	defer fake.upsertMutex.Unlock()
	fake.UpsertStub = stub
}

func (fake *FakeSecretStore) UpsertArgsForCall(i int) *v1.Secret {
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	argsForCall := fake.upsertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.SecretStore = new(FakeSecretStore)
